// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proyecto_BD.Models;

#nullable disable

namespace Proyecto_BD.Migrations
{
    [DbContext(typeof(ContextoBaseDatos))]
    [Migration("20250506052109_Consultorios")]
    partial class Consultorios
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Proyecto_BD.Controllers.Servicio", b =>
                {
                    b.Property<int>("ID_Servicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Servicio"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Precio_Servicio")
                        .HasColumnType("real");

                    b.HasKey("ID_Servicio");

                    b.ToTable("Servicio");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Cita", b =>
                {
                    b.Property<int>("ID_Cita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Cita"));

                    b.Property<DateTime>("Fecha_Cita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_Registro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Hora_Cita")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Estatus_Cita")
                        .HasColumnType("int");

                    b.Property<int>("ID_Medico")
                        .HasColumnType("int");

                    b.Property<int>("ID_Paciente")
                        .HasColumnType("int");

                    b.HasKey("ID_Cita");

                    b.HasIndex("ID_Estatus_Cita");

                    b.HasIndex("ID_Medico");

                    b.HasIndex("ID_Paciente");

                    b.ToTable("Cita");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Consultorio", b =>
                {
                    b.Property<int>("ID_Consultorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Consultorio"));

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("Numero_Consultorio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Piso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Consultorio");

                    b.ToTable("Consultorio");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Especialidad", b =>
                {
                    b.Property<int>("ID_Especialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Especialidad"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PrecioCita")
                        .HasColumnType("real");

                    b.HasKey("ID_Especialidad");

                    b.ToTable("Especialidad");
                });

            modelBuilder.Entity("Proyecto_BD.Models.EstatusCita", b =>
                {
                    b.Property<int>("ID_Estatus_Cita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Estatus_Cita"));

                    b.Property<string>("Estatus_Cita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Estatus_Cita");

                    b.ToTable("EstatusCita");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Jornada", b =>
                {
                    b.Property<int>("ID_Jornada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Jornada"));

                    b.Property<DateTime>("Hora_Entrada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Hora_Salida")
                        .HasColumnType("datetime2");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Jornada");

                    b.ToTable("Jornada");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Medicina", b =>
                {
                    b.Property<int>("ID_Medicina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Medicina"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_Medicina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Precio_Medicina")
                        .HasColumnType("real");

                    b.HasKey("ID_Medicina");

                    b.ToTable("Medicina");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Medico", b =>
                {
                    b.Property<int>("ID_Medico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Medico"));

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID_Consultorio")
                        .HasColumnType("int");

                    b.Property<int>("ID_Especialidad")
                        .HasColumnType("int");

                    b.Property<int>("ID_Jornada")
                        .HasColumnType("int");

                    b.Property<int>("ID_Usuario")
                        .HasColumnType("int");

                    b.HasKey("ID_Medico");

                    b.HasIndex("ID_Consultorio");

                    b.HasIndex("ID_Especialidad");

                    b.HasIndex("ID_Jornada");

                    b.HasIndex("ID_Usuario");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Paciente", b =>
                {
                    b.Property<int>("ID_Paciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Paciente"));

                    b.Property<string>("Alergia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Estatura")
                        .HasColumnType("real");

                    b.Property<int>("ID_Tipo_Sangre")
                        .HasColumnType("int");

                    b.Property<int>("ID_Usuario")
                        .HasColumnType("int");

                    b.Property<float>("Peso")
                        .HasColumnType("real");

                    b.HasKey("ID_Paciente");

                    b.HasIndex("ID_Tipo_Sangre");

                    b.HasIndex("ID_Usuario");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Pago", b =>
                {
                    b.Property<int>("ID_Pago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Pago"));

                    b.Property<string>("ComprobantePago")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado_Pago")
                        .HasColumnType("bit");

                    b.Property<int>("ID_Cita")
                        .HasColumnType("int");

                    b.HasKey("ID_Pago");

                    b.HasIndex("ID_Cita");

                    b.ToTable("Pago");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Recepcionista", b =>
                {
                    b.Property<int>("ID_Recepcionista")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Recepcionista"));

                    b.Property<int>("ID_Jornada")
                        .HasColumnType("int");

                    b.Property<int>("ID_Usuario")
                        .HasColumnType("int");

                    b.HasKey("ID_Recepcionista");

                    b.HasIndex("ID_Jornada");

                    b.HasIndex("ID_Usuario");

                    b.ToTable("Recepcionista");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Receta", b =>
                {
                    b.Property<int>("ID_Receta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Receta"));

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID_Cita")
                        .HasColumnType("int");

                    b.HasKey("ID_Receta");

                    b.HasIndex("ID_Cita");

                    b.ToTable("Receta");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Ticket", b =>
                {
                    b.Property<int>("ID_Ticket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Ticket"));

                    b.Property<int>("ID_Item")
                        .HasColumnType("int");

                    b.Property<int>("ID_Venta")
                        .HasColumnType("int");

                    b.Property<bool>("Tipo_item")
                        .HasColumnType("bit");

                    b.HasKey("ID_Ticket");

                    b.HasIndex("ID_Venta");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Proyecto_BD.Models.TipoSangre", b =>
                {
                    b.Property<int>("ID_Tipo_Sangre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Tipo_Sangre"));

                    b.Property<string>("Tipo_Sangre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Tipo_Sangre");

                    b.ToTable("TipoSangre");
                });

            modelBuilder.Entity("Proyecto_BD.Models.TipoUsuario", b =>
                {
                    b.Property<int>("ID_Tipo_Usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Tipo_Usuario"));

                    b.Property<string>("Tipo_Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Tipo_Usuario");

                    b.ToTable("TiposUsuario");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Tratamiento", b =>
                {
                    b.Property<int>("ID_Tratamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Tratamiento"));

                    b.Property<int>("ID_Receta")
                        .HasColumnType("int");

                    b.Property<string>("Indicaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Tratamiento");

                    b.HasIndex("ID_Receta");

                    b.ToTable("Tratamiento");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Usuario", b =>
                {
                    b.Property<int>("ID_Usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Usuario"));

                    b.Property<string>("Apellido_Materno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellido_Paterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CURP")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado_Usuario")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha_Nacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_Registro")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Tipo_Usuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Usuario");

                    b.HasIndex("ID_Tipo_Usuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Ventas", b =>
                {
                    b.Property<int>("ID_Ventas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Ventas"));

                    b.Property<DateTime>("Fecha_Venta")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Recepcionista")
                        .HasColumnType("int");

                    b.HasKey("ID_Ventas");

                    b.HasIndex("ID_Recepcionista");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Cita", b =>
                {
                    b.HasOne("Proyecto_BD.Models.EstatusCita", "EstatusCita")
                        .WithMany("Cita")
                        .HasForeignKey("ID_Estatus_Cita")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proyecto_BD.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("ID_Medico")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proyecto_BD.Models.Paciente", "Paciente")
                        .WithMany("Cita")
                        .HasForeignKey("ID_Paciente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EstatusCita");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Medico", b =>
                {
                    b.HasOne("Proyecto_BD.Models.Consultorio", "Consultorio")
                        .WithMany()
                        .HasForeignKey("ID_Consultorio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proyecto_BD.Models.Especialidad", "Especialidad")
                        .WithMany()
                        .HasForeignKey("ID_Especialidad")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proyecto_BD.Models.Jornada", "Jornada")
                        .WithMany()
                        .HasForeignKey("ID_Jornada")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proyecto_BD.Models.Usuario", "Usuario")
                        .WithMany("Medico")
                        .HasForeignKey("ID_Usuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultorio");

                    b.Navigation("Especialidad");

                    b.Navigation("Jornada");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Paciente", b =>
                {
                    b.HasOne("Proyecto_BD.Models.TipoSangre", "Tipo_Sangres")
                        .WithMany("Paciente")
                        .HasForeignKey("ID_Tipo_Sangre")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proyecto_BD.Models.Usuario", "Usuario")
                        .WithMany("Paciente")
                        .HasForeignKey("ID_Usuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tipo_Sangres");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Pago", b =>
                {
                    b.HasOne("Proyecto_BD.Models.Cita", "Cita")
                        .WithMany("Pagos")
                        .HasForeignKey("ID_Cita")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Recepcionista", b =>
                {
                    b.HasOne("Proyecto_BD.Models.Jornada", "Jornada")
                        .WithMany()
                        .HasForeignKey("ID_Jornada")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proyecto_BD.Models.Usuario", "Usuario")
                        .WithMany("Recepcionista")
                        .HasForeignKey("ID_Usuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jornada");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Receta", b =>
                {
                    b.HasOne("Proyecto_BD.Models.Cita", "Cita")
                        .WithMany("Recetas")
                        .HasForeignKey("ID_Cita")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Ticket", b =>
                {
                    b.HasOne("Proyecto_BD.Models.Ventas", "Venta")
                        .WithMany()
                        .HasForeignKey("ID_Venta")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Tratamiento", b =>
                {
                    b.HasOne("Proyecto_BD.Models.Receta", "Receta")
                        .WithMany("Tratamiento")
                        .HasForeignKey("ID_Receta")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Usuario", b =>
                {
                    b.HasOne("Proyecto_BD.Models.TipoUsuario", "TipoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("ID_Tipo_Usuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoUsuario");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Ventas", b =>
                {
                    b.HasOne("Proyecto_BD.Models.Recepcionista", "Recepcionista")
                        .WithMany()
                        .HasForeignKey("ID_Recepcionista")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recepcionista");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Cita", b =>
                {
                    b.Navigation("Pagos");

                    b.Navigation("Recetas");
                });

            modelBuilder.Entity("Proyecto_BD.Models.EstatusCita", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Paciente", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Receta", b =>
                {
                    b.Navigation("Tratamiento");
                });

            modelBuilder.Entity("Proyecto_BD.Models.TipoSangre", b =>
                {
                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Proyecto_BD.Models.TipoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Proyecto_BD.Models.Usuario", b =>
                {
                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Recepcionista");
                });
#pragma warning restore 612, 618
        }
    }
}
